// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for Affiliate Level/Category (adjust levels as needed based on full requirements)
enum AffiliateLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

// Enum for Affiliate Status
enum AffiliateStatus {
  ACTIVE
  INACTIVE
}

// Enum for Indication Status
enum IndicationStatus {
  PENDING_KYC
  PENDING_VALIDATION // Waiting for CPA criteria
  VALIDATED
  REJECTED
}

// Enum for CPA Qualification Rule
enum CpaQualificationRule {
  DEPOSIT_ONLY        // Qualifies upon meeting minimum deposit
  DEPOSIT_AND_ACTIVITY // Qualifies upon meeting minimum deposit AND activity (bets or GGR)
}

model Affiliate {
  id              String  @id @default(cuid())
  upbetUserId     String  @unique // ID from UPBET platform
  level           AffiliateLevel @default(BRONZE)
  status          AffiliateStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Self-relation for network structure
  uplineAffiliateId String? // Nullable for the root affiliate
  upline          Affiliate? @relation("NetworkHierarchy", fields: [uplineAffiliateId], references: [id], onDelete: SetNull)
  downlines       Affiliate[] @relation("NetworkHierarchy")

  // Relations
  indications     Indication[] // Indications made by this affiliate
  wallet          Wallet?      // Affiliate's wallet
  commissions     Commission[] // Commissions received by this affiliate

  @@index([uplineAffiliateId])
}

model Indication {
  id              String  @id @default(cuid())
  indicatedUserId String  @unique // ID of the user indicated on UPBET
  status          IndicationStatus @default(PENDING_KYC)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to the affiliate who made the indication
  affiliateId     String
  affiliate       Affiliate @relation(fields: [affiliateId], references: [id])

  // Fields for tracking CPA qualification progress
  firstDepositAmount Decimal? @db.Decimal(12, 2)
  firstDepositAt  DateTime?
  betCount        Int      @default(0)
  totalGgr        Decimal  @default(0.0) @db.Decimal(12, 2)

  // Relation to the commissions generated by this indication (One-to-Many)
  commissions     Commission[]

  @@index([affiliateId])
  @@index([indicatedUserId])
}

model Wallet {
  id              String  @id @default(cuid())
  balance         Decimal @default(0.0) @db.Decimal(12, 2) // Precision for currency
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to the affiliate
  affiliateId     String    @unique
  affiliate       Affiliate @relation(fields: [affiliateId], references: [id])

  // Relation to transactions
  transactions    WalletTransaction[]
}

// Enum for Commission Type
enum CommissionType {
  CPA
  REVSHARE
  LEVEL_UP_REWARD
  DAILY_SEQUENCE_BONUS
  CHEST_REWARD
  RANKING_PRIZE
}

// Model for Commissions (basic structure for now)
model Commission {
  id              String  @id @default(cuid())
  amount          Decimal @db.Decimal(12, 2)
  type            CommissionType
  createdAt       DateTime @default(now())

  // Relation to the recipient affiliate
  recipientAffiliateId String
  recipientAffiliate   Affiliate @relation(fields: [recipientAffiliateId], references: [id])

  // Relation to the source indication (Many-to-One)
  sourceIndicationId String?    // Optional, as RevShare might not link to a single indication
  sourceIndication   Indication? @relation(fields: [sourceIndicationId], references: [id])

  // Relation to the wallet transaction crediting this commission
  walletTransactionId String? @unique
  walletTransaction   WalletTransaction? @relation(fields: [walletTransactionId], references: [id])

  @@index([recipientAffiliateId])
  @@index([type])
  @@index([sourceIndicationId]) // Add index for querying commissions by indication
}

// Enum for Transaction Type
enum TransactionType {
  CREDIT
  DEBIT
}

// Model for Wallet Transactions (basic structure)
model WalletTransaction {
  id              String  @id @default(cuid())
  amount          Decimal @db.Decimal(12, 2)
  type            TransactionType
  description     String // e.g., "CPA Commission from indication X", "RevShare Period Y", "Withdrawal Z"
  createdAt       DateTime @default(now())

  // Relation to the wallet
  walletId        String
  wallet          Wallet @relation(fields: [walletId], references: [id])

  // Relation to the commission (if it's a credit from commission)
  commission      Commission? // This implies a One-to-One relation from Transaction to Commission

  // Add relation to WithdrawalRequest later

  @@index([walletId])
}

// Model for System-wide Settings
model SystemSettings {
  id                    String  @id @default(cuid()) // Using cuid for consistency, though likely only one row
  activeCpaRule         CpaQualificationRule @default(DEPOSIT_AND_ACTIVITY) // Default to stricter rule
  cpaMinimumDeposit     Decimal @default(30.00) @db.Decimal(12, 2)
  cpaActivityBetCount   Int     @default(10)
  cpaActivityMinGgr     Decimal @default(20.00) @db.Decimal(12, 2)
  cpaCommissionAmount   Decimal @default(50.00) @db.Decimal(12, 2) // Example CPA value, adjust as needed
  updatedAt             DateTime @updatedAt

  @@unique([id]) // Ensure only one settings row exists, potentially enforce via application logic
}




// Model for Admin Users (for AdminJS authentication)
model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Stores the hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

